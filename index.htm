<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>GLSL sandbox</title>

  <link href="libs/index.css" rel="stylesheet">
  <link href="libs/css/ace_editor.css" rel="stylesheet">
  <link href="libs/css/ace_tm.css" rel="stylesheet">
  <link href="libs/css/ace_chrome.css" rel="stylesheet">

  <script src="libs/js/hand.minified-1.2.js"></script>
  <script src="libs/js/babylon.js"></script>
  <script src="libs/index.js"></script>
  <script src="libs/js/ace.js" type="text/javascript" charset="utf-8"></script>
  <script src="libs/js/fileSaver.js"></script>
  <script src="libs/js/jszip.min.js"></script>
  <script src="libs/js/theme-chrome.js"></script>
  <script src="libs/js/mode-glsl.js"></script>
</head>

<body>
<script id="vertexShaderCode" type="x-shader/x-vertex">
//  precision highp float;

// Attributes
attribute vec3 position;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec2 vUV;

void main(void) {
  gl_Position = worldViewProjection * vec4(position, 1.0);

  vUV = uv;
}
</script>
<script id="fragmentShaderCode" type="x-shader/x-fragment">
precision highp float;

varying vec2 vUV;

uniform sampler2D textureSampler;

void main(void) {
  gl_FragColor = texture2D(textureSampler, vUV);
}
</script>

<script type="x-shader/x-vertex" id="basicLight_noLight_vret">
// Attributes
attribute vec3 position;

// Uniforms
uniform mat4 worldViewProjection;

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);
}
</script>
<script type="x-shader/x-fragment" id="basicLight_noLight_frag">
#ifdef GL_ES
    precision highp float;
#endif

void main(void) {
    gl_FragColor = vec4(1.0, 0.5, 0.31, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="basicLight_flat_vret">
// Attributes
attribute vec3 position;

// Uniforms
uniform mat4 worldViewProjection;

void main(void) {
    vec3 pos = position;
    pos.z = .0;
    gl_Position = worldViewProjection * vec4(pos, 1.0);
}
</script>
<script type="x-shader/x-fragment" id="basicLight_flat_frag">
#ifdef GL_ES
    precision highp float;
#endif

void main(void) {
    gl_FragColor = vec4(1.0, 0.5, 0.31, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="basicLight_simplestList_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec3 vNormal;

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vNormal = normalize(normal);
}
</script>
<script type="x-shader/x-fragment" id="basicLight_simplestList_frag">
#ifdef GL_ES
    precision highp float;
#endif

vec3 lightColor = vec3(1.0, 0.0, 0.0);
vec3 lightDir = vec3(0.0, 0.0, 4.0);

varying vec3 vNormal;

void main(void) {
    vec3 color = clamp( dot( normalize(vNormal), lightDir ), 0.0, 1.0 ) * lightColor;

    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="basicLight_perVertexLighting_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;

// Uniforms
uniform mat4 worldViewProjection;
uniform vec3 cameraPosition;

// Varying
varying vec3 vColor;

// lightParameters
vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 lightDiffuse = vec3(1.0, 1.0, 1.0);
vec3 lightSpecular = vec3(1.0, 1.0, 1.0);
vec3 lightAmbient = vec3(0.1, 0.1, 0.1);

// materialPatameters
vec3 materialEmission = vec3(0.7, 0.4, 0.21);
vec3 materialAmbient = vec3(0.1, 0.1, 0.1);
vec3 materialDiffuse = vec3(1.0, 0.5, 0.31);
vec3 materialSpecular = vec3(1.0, 1.0, 1.0);
float materialShininess = 32.0;

void main(void) {
    vec3 lightDir;
    vec3 diffuse, ambient, specular, globalAmbient;
    float NdotL, NdotHV;

    vec3 L = normalize(lightPosition - position);
    vec3 V = normalize(cameraPosition - position);
    vec3 H = normalize( L + V );

    lightDir = L;

    // diffuse
    diffuse = materialDiffuse * lightDiffuse;

    // ambient
    ambient = materialAmbient * lightAmbient;

    // specular
    NdotL = max( dot( normal, lightDir ), 0.0 );
    if (NdotL > 0.0) {
        NdotHV = max( dot( normal, H ), 0.0 );
        specular = materialSpecular * lightSpecular * pow( NdotHV, materialShininess );
    } else {
        specular = vec3(0.0);
    }
    diffuse *= NdotL;

    vColor = diffuse + ambient + specular;

    gl_Position = worldViewProjection * vec4(position, 1.0);

}
</script>
<script type="x-shader/x-fragment" id="basicLight_perVertexLighting_frag">
#ifdef GL_ES
    precision highp float;
#endif

varying vec3 vColor;

void main(void) {
    gl_FragColor = vec4(vColor, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="basicLight_perPixelLighting_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;

// Uniforms
uniform mat4 worldViewProjection;
uniform vec3 cameraPosition;

// Varying
varying vec3 vDiffuse, vAmbient;
varying vec3 vNormal, vLightDir, vHalfVector;

// lightParameters
vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 lightDiffuse = vec3(1.0, 1.0, 1.0);
vec3 lightSpecular = vec3(1.0, 1.0, 1.0);
vec3 lightAmbient = vec3(0.1, 0.1, 0.1);

// materialPatameters
vec3 materialEmission = vec3(0.7, 0.4, 0.21);
vec3 materialAmbient = vec3(0.1, 0.1, 0.1);
vec3 materialDiffuse = vec3(1.0, 0.5, 0.31);
vec3 materialSpecular = vec3(1.0, 1.0, 1.0);
float materialShininess = 32.0;

void main(void) {
    vNormal = normal;

    vec3 L = normalize(lightPosition - position);
    vec3 V = normalize(cameraPosition - position);
    vec3 H = normalize( L + V );

    vLightDir = L;

    vHalfVector = H;

    // diffuse
    vDiffuse = materialDiffuse * lightDiffuse;

    // ambient
    vAmbient = materialAmbient * lightAmbient;

    gl_Position = worldViewProjection * vec4(position, 1.0);

}
</script>
<script type="x-shader/x-fragment" id="basicLight_perPixelLighting_frag">
#ifdef GL_ES
    precision highp float;
#endif

varying vec3 vDiffuse, vAmbient;
varying vec3 vNormal, vLightDir, vHalfVector;

// lightParameters
vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 lightDiffuse = vec3(1.0, 1.0, 1.0);
vec3 lightSpecular = vec3(1.0, 1.0, 1.0);
vec3 lightAmbient = vec3(0.1, 0.1, 0.1);

// materialPatameters
vec3 materialEmission = vec3(0.7, 0.4, 0.21);
vec3 materialAmbient = vec3(0.1, 0.1, 0.1);
vec3 materialDiffuse = vec3(1.0, 0.5, 0.31);
vec3 materialSpecular = vec3(1.0, 1.0, 1.0);
float materialShininess = 32.0;

void main(void) {
    float NdotL, NdotHV;

    vec3 color = vec3(0.0);

    // ambient
    color += vAmbient;

    NdotL = max( dot( vNormal, vLightDir ), 0.0 );
    if (NdotL > 0.0) {
        // diffuse
        color += vDiffuse * NdotL;

        // specular
        NdotHV = max( dot( vNormal, vHalfVector ), 0.0 );
        color += materialSpecular * lightSpecular * pow( NdotHV, materialShininess );
    }


    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="basicLight_pointLight_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;

// Uniforms
uniform mat4 worldViewProjection;
uniform vec3 cameraPosition;
uniform mat4 worldView;
uniform float time;

// Varying
varying vec3 vDiffuse, vAmbient;
varying vec3 vNormal, vLightDir, vHalfVector;
varying float vDist;

// lightParameters
vec3 lightPosition = vec3(4.0, 2.0, 4.0);
vec3 lightDiffuse = vec3(1.0, 1.0, 1.0);
vec3 lightSpecular = vec3(1.0, 1.0, 1.0);
vec3 lightAmbient = vec3(0.1, 0.1, 0.1);

// materialPatameters
vec3 materialEmission = vec3(0.7, 0.4, 0.21);
vec3 materialAmbient = vec3(0.1, 0.1, 0.1);
vec3 materialDiffuse = vec3(1.0, 0.5, 0.31);
vec3 materialSpecular = vec3(1.0, 1.0, 1.0);
float materialShininess = 32.0;

void main(void) {
    lightPosition.x = cos(time) * 4.0;
    lightPosition.z = sin(time) * 4.0;

    vNormal = normal;

    vec3 L = normalize(lightPosition - position);
    vec3 V = normalize(cameraPosition - position);
    vec3 H = normalize( L + V );

    vLightDir = L;

    vHalfVector = H;

    // diffuse
    vDiffuse = materialDiffuse * lightDiffuse;

    // ambient
    vAmbient = materialAmbient * lightAmbient;

    gl_Position = worldViewProjection * vec4(position, 1.0);

    vec4 ecPos;
    vec3 aux;
    ecPos = worldView * vec4(position, 1.0);
    aux = lightPosition - vec3(ecPos);
    vDist = length(aux);
}
</script>
<script type="x-shader/x-fragment" id="basicLight_pointLight_frag">
#ifdef GL_ES
    precision highp float;
#endif

varying vec3 vDiffuse, vAmbient;
varying vec3 vNormal, vLightDir, vHalfVector;
varying float vDist;

// lightParameters
vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 lightDiffuse = vec3(1.0, 1.0, 1.0);
vec3 lightSpecular = vec3(1.0, 1.0, 1.0);
vec3 lightAmbient = vec3(0.1, 0.1, 0.1);

float lightConstantAttenuation = 0.1;
float lightLinearAttenuation = 0.05;
float lightQuadraticAttenuation = 0.025;

// materialPatameters
vec3 materialEmission = vec3(0.7, 0.4, 0.21);
vec3 materialAmbient = vec3(0.1, 0.1, 0.1);
vec3 materialDiffuse = vec3(1.0, 0.5, 0.31);
vec3 materialSpecular = vec3(1.0, 1.0, 1.0);
float materialShininess = 32.0;

void main(void) {
    float NdotL, NdotHV;
    float att;

    vec3 color = vec3(0.0);

    // ambient
    color += vAmbient;

    NdotL = max( dot( vNormal, vLightDir ), 0.0 );
    if (NdotL > 0.0) {
        att = 1.0 / (lightConstantAttenuation + lightLinearAttenuation * vDist + lightQuadraticAttenuation * vDist * vDist);

        // diffuse
        color += vDiffuse * NdotL;

        // specular
        NdotHV = max( dot( vNormal, vHalfVector ), 0.0 );
        color += materialSpecular * lightSpecular * pow( NdotHV, materialShininess );

        color *= att;
    }


    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="basicLight_spotLight_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;

// Uniforms
uniform mat4 worldViewProjection;
uniform vec3 cameraPosition;
uniform mat4 worldView;

// Varying
varying vec3 vDiffuse, vAmbient;
varying vec3 vNormal, vLightDir, vHalfVector;
varying float vDist;

// lightParameters
vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 lightDiffuse = vec3(1.0, 1.0, 1.0);
vec3 lightSpecular = vec3(1.0, 1.0, 1.0);
vec3 lightAmbient = vec3(0.1, 0.1, 0.1);

// materialPatameters
vec3 materialEmission = vec3(0.7, 0.4, 0.21);
vec3 materialAmbient = vec3(0.1, 0.1, 0.1);
vec3 materialDiffuse = vec3(1.0, 0.5, 0.31);
vec3 materialSpecular = vec3(1.0, 1.0, 1.0);
float materialShininess = 32.0;

void main(void) {
    vNormal = normal;

    vec3 L = normalize(lightPosition - position);
    vec3 V = normalize(cameraPosition - position);
    vec3 H = normalize( L + V );

    vLightDir = L;

    vHalfVector = H;

    // diffuse
    vDiffuse = materialDiffuse * lightDiffuse;

    // ambient
    vAmbient = materialAmbient * lightAmbient;

    gl_Position = worldViewProjection * vec4(position, 1.0);

    vec4 ecPos;
    vec3 aux;
    ecPos = worldView * vec4(position, 1.0);
    aux = lightPosition - vec3(ecPos);
    vDist = length(aux);
}
</script>
<script type="x-shader/x-fragment" id="basicLight_spotLight_frag">
#ifdef GL_ES
    precision highp float;
#endif

varying vec3 vDiffuse, vAmbient;
varying vec3 vNormal, vLightDir, vHalfVector;
varying float vDist;

uniform float time;

// lightParameters
vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 lightDiffuse = vec3(1.0, 1.0, 1.0);
vec3 lightSpecular = vec3(1.0, 1.0, 1.0);
vec3 lightAmbient = vec3(0.1, 0.1, 0.1);

float lightConstantAttenuation = 0.1;
float lightLinearAttenuation = 0.05;
float lightQuadraticAttenuation = 0.025;

float lightSpotCosCutoff = 0.75;
vec3 lightSpotDirection = vec3(-4.0, -4.0, -4.0);

// materialPatameters
vec3 materialEmission = vec3(0.7, 0.4, 0.21);
vec3 materialAmbient = vec3(0.1, 0.1, 0.1);
vec3 materialDiffuse = vec3(1.0, 0.5, 0.31);
vec3 materialSpecular = vec3(1.0, 1.0, 1.0);
float materialShininess = 32.0;

void main(void) {
    lightSpotDirection.x = cos(time) * -4.0;
    lightSpotDirection.z = sin(time) * -4.0;

    float NdotL, NdotHV;
    float att, spotEffect;

    vec3 color = vec3(0.0);

    // ambient
    color += vAmbient;

    NdotL = max( dot( vNormal, vLightDir ), 0.0 );
    if (NdotL > 0.0) {
        spotEffect = dot( normalize( lightSpotDirection ), normalize(-vLightDir) );

        if (spotEffect > lightSpotCosCutoff) {
            att = 1.0 / (lightConstantAttenuation + lightLinearAttenuation * vDist + lightQuadraticAttenuation * vDist * vDist);

            // diffuse
            color += vDiffuse * NdotL;

            // specular
            NdotHV = max( dot( vNormal, vHalfVector ), 0.0 );
            color += materialSpecular * lightSpecular * pow( NdotHV, materialShininess );

            color *= att;
        }
    }

    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="basicLight_basicTexture_vret">
// Attributes
attribute vec3 position;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec2 vUV;

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="basicLight_basicTexture_frag">
precision highp float;

varying vec2 vUV;

uniform sampler2D textureSampler;

void main(void) {
    gl_FragColor = texture2D(textureSampler, vUV);
}
</script>

<script type="x-shader/x-vertex" id="npr_tone_vert">
// Attributes
attribute vec3 position;
attribute vec3 normal;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec3 vNormal;

void main() {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vNormal = normal;
}
</script>
<script type="x-shader/x-fragment" id="npr_tone_frag">
// Varying
varying vec3 vNormal;

vec3 diffuseColor = vec3(1.0, 0.5, 0.31);
vec3 phongColor = vec3(1.0, 0.7, 0.52);
float edge = 0.5;
float phong = 0.9;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);

void main() {
    vec3 color = diffuseColor;
    float intensity = dot( lightPosition, vNormal );
    if ( abs( intensity ) < edge ) {
        color = vec3(0.0);
    }
    if ( intensity > phong ) {
        color = phongColor;
    }
    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="npr_hatch_vert">
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;
uniform float time;

// Varying
varying vec3 vNormal;
varying vec2 vUV;
varying float vLightIntensity;
varying float vV;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);

void main() {
    vec3 pos = vec3(worldViewProjection * vec4(position, 1.0));
    vec3 tnorm = normalize( normal );
    vec3 lightDir = normalize( lightPosition - position );

    vLightIntensity = max( dot( lightDir, tnorm ), 0.0 );

    if(uv.s == 0.0 && uv.t == 0.0) {
        vV = pos.y;
    } else {
        vV = uv.t;
    }

    gl_Position = worldViewProjection * vec4(position, 1.0);

    vNormal = normal;
    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="npr_hatch_frag">
// Varying
varying vec3 vNormal;
varying vec2 vUV;
varying float vLightIntensity;
varying float vV;

const float frequency = 1.0;

float sWidth = 10.0;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main() {
    float dp = length( vec2( dFdx(vV * sWidth), dFdy(vV * sWidth) ) );
    float logdp = -log2(dp);
    float ilogdp = floor(logdp);
    float stripes = exp2(ilogdp);
    float noise = rand(vUV);
    float sawtooth = fract( (vV + noise * 0.01) * frequency * stripes );
    float triangle = abs( 2.0 * sawtooth - 1.0 );
    float transition = logdp - ilogdp;
    triangle = abs( (1.0 + transition) * triangle - transition );

    const float edgeW = 0.2;
    float edge0 = clamp( vLightIntensity - edgeW, 0.0, 1.0 );
    float edge1 = clamp( vLightIntensity, 0.0, 1.0 );

    float square = 1.0 - smoothstep(edge0, edge1, triangle);

    gl_FragColor = vec4(vec3(square), 1.0);
}
</script>

<script type="x-shader/x-vertex" id="npr_gooch_vert">
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;
uniform float time;

// Varying
varying float vNdotL;
varying vec3 vReflectVec;
varying vec3 vViewVec;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);

void main() {
    vec3 pos = vec3(worldViewProjection * vec4(position, 1.0));
    vec3 tnorm = normalize( normal );
    vec3 lightDir = normalize( lightPosition - position );

    vReflectVec = normalize( reflect( -lightDir, tnorm ) );
    vViewVec = normalize( -pos );
    vNdotL = ( dot( lightDir, tnorm ) + 1.0 ) * 0.5;

    gl_Position = worldViewProjection * vec4(position, 1.0);
}
</script>
<script type="x-shader/x-fragment" id="npr_gooch_frag">
// Varying
varying float vNdotL;
varying vec3 vReflectVec;
varying vec3 vViewVec;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);

vec3 surfaceColor = vec3(1.0, 0.5, 0.31);
vec3 warmColor = vec3(1.0, 0.1, 0.0);
vec3 coolColor = vec3(0.0, 0.1, 1.0);
float diffuseWarm = 0.2;
float diffuseCool = 0.1;

void main() {
    vec3 kCool = min(coolColor + diffuseCool * surfaceColor, 1.0);
    vec3 kWarm = min(warmColor + diffuseWarm * surfaceColor, 1.0);
    vec3 kFinal = mix(kCool, kWarm, vNdotL);

    vec3 nReflect = normalize(vReflectVec);
    vec3 nView = normalize(vViewVec);

    float spec = max( dot(nReflect, nView), 0.0 );
    spec = pow(spec, 32.0);

    gl_FragColor = vec4(min(kFinal + spec, 1.0), 1.0);
}
</script>

<script type="x-shader/x-vertex" id="npr_PolkaDot_vert">
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;
uniform float time;

// Varying
varying float vLghtIntensity;
varying vec3 vPosition;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);
float specularContribution = 0.7;

void main() {
    vec3 pos = vec3(worldViewProjection * vec4(position, 1.0));
    vec3 tnorm = normalize( normal );
    vec3 lightDir = normalize( lightPosition - position );

    vec3 reflectVec = normalize( reflect( -lightDir, tnorm ) );
    vec3 viewVec = normalize( -pos );

    float diffuseContribution = 1.0 - specularContribution;

    float diffuse = max( dot(lightDir, tnorm), 0.0 );
    float specular = 0.0;
    if (diffuse > 0.0) {
        specular = max( dot(reflectVec, viewVec), 0.0 );
        specular = pow( specular, 16.0 );
    }

    vLghtIntensity = diffuseContribution * diffuse * 1.5 + specularContribution * specular;

    vPosition = position;

    gl_Position = worldViewProjection * vec4(position, 1.0);
}
</script>
<script type="x-shader/x-fragment" id="npr_PolkaDot_frag">
// Varying
varying float vLghtIntensity;
varying vec3 vPosition;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);

vec3 spacing = vec3(0.3, 0.3, 0.25);
float dotSize = 0.1;
vec3 modelColor = vec3(1.0);
vec3 PolkaDotColor = vec3(0.0);

void main() {
    float insideSphere, sphereRadius, scaledPointLength;
    vec3 scaledPoint, finalColor;

    scaledPoint = vPosition - (spacing * floor( vPosition / spacing ));
    scaledPoint = scaledPoint - spacing / 2.0;
    scaledPointLength = length(scaledPoint);
    insideSphere = step(scaledPointLength, dotSize);
    finalColor = vec3( mix( modelColor, PolkaDotColor, insideSphere ) );

    gl_FragColor = clamp( vec4(finalColor * vLghtIntensity, 1.0), 0.0, 1.0 );
}
</script>

<script type="x-shader/x-vertex" id="transform_sphereTransform_vert">
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;
uniform float time;

// Varying
varying vec4 vColor;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 surfaceColor = vec3(1.0, 0.5, 0.31);
float radius = 1.5;
float blend = 0.1;

const float PI = 3.1415926;
const float TWO_PI = 6.28318;

vec3 sphere(vec2 domain) {
    vec3 range;
    range.x = radius * cos(domain.y) * sin(domain.x);
    range.y = radius * sin(domain.y) * sin(domain.x);
    range.z = radius * cos(domain.x);
    return range;
}

void main() {
    blend = (sin(time) + 1.0) * 0.5;

    vec2 p0 = position.xy * TWO_PI;
    vec3 tnormal = sphere(p0);
    vec3 r0 = radius * tnormal;
    vec3 vertex = r0;
    tnormal = tnormal * blend + normal * (1.0 - blend);
    vertex = vertex * blend + position * (1.0 - blend);
    vec3 lightDir = normalize(lightPosition - vertex);
    float diffuse = max( dot(lightDir, tnormal), 0.0 );
    if (diffuse < 0.125) {
        diffuse = 0.125;
    }
    vColor = vec4(surfaceColor * diffuse, 1.0);
    gl_Position = worldViewProjection * vec4(vertex, 1.0);
}
</script>
<script type="x-shader/x-fragment" id="transform_sphereTransform_frag">
// Varying
varying vec4 vColor;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);

void main() {
    gl_FragColor = vColor;
}
</script>

<script type="x-shader/x-vertex" id="noise_simpleNoise_vert">
// Attributes
attribute vec3 position;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying float vNoise;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vNoise = rand(uv);
}
</script>
<script type="x-shader/x-fragment" id="noise_simpleNoise_frag">
precision highp float;

varying float vNoise;

void main(void) {
    gl_FragColor = vec4(vec3(vNoise), 1.0);
}
</script>

<script type="x-shader/x-vertex" id="noise_PerlinNoise_vert">
// Attributes
attribute vec3 position;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying float vNoise;

float scale = 5.0;

//
// GLSL textureless classic 3D noise "cnoise",
// with an RSL-style periodic variant "pnoise".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-10-11
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/ashima/webgl-noise
//

vec3 mod289(vec3 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 fade(vec3 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(vec3 P)
{
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
  return 2.2 * n_xyz;
}

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vNoise = cnoise( normalize(position) * scale );
}
</script>
<script type="x-shader/x-fragment" id="noise_PerlinNoise_frag">
precision highp float;

varying float vNoise;

void main(void) {
    gl_FragColor = vec4(vec3(vNoise), 1.0);
}
</script>

<script type="x-shader/x-vertex" id="processing_stripe_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec3 vDiffuseColor;
varying vec3 vSpecularColor;
varying vec2 vUV;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 lightColor = vec3(0.9, 0.8, 0.7);
vec3 eyePosition = vec3(0.0, 0.0, 4.0);
vec3 specular = vec3(0.2, 0.2, 0.2);
vec3 ambient = vec3(0.2, 0.2, 0.2);
float Kd = 0.8;

void main(void) {
    vec3 tnorm = normalize(normal);
    vec3 lightDir = normalize(lightPosition - position);
    vec3 viweDir = normalize(eyePosition - position);
    vec3 HVec = normalize(viweDir + lightDir);

    float spec = clamp( dot(HVec, tnorm), 0.0, 1.0 );
    spec = pow(spec, 16.0);

    vDiffuseColor = lightColor * vec3( Kd * dot(lightDir, tnorm) );
    vDiffuseColor = clamp(ambient + vDiffuseColor, 0.0, 1.0);
    vSpecularColor = clamp(lightColor * specular * spec, 0.0, 1.0);

    gl_Position = worldViewProjection * vec4(position, 1.0);

    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="processing_stripe_frag">
precision highp float;

varying vec3 vDiffuseColor;
varying vec3 vSpecularColor;
varying vec2 vUV;

uniform sampler2D textureSampler;

vec3 stripeColor = vec3(1.0, 0.5, 0.0);
vec3 backColor = vec3(0.2, 0.2, 1.0);
float width = 0.5;
float fuzz = 0.1;
float scale = 10.0;

void main(void) {
    float scaled_t = fract( vUV.t * scale );

    float frac1 = clamp( scaled_t / fuzz, 0.0, 1.0 );
    float frac2 = clamp( (scaled_t - width) / fuzz, 0.0, 1.0 );

    frac1 = frac1 * (1.0 - frac2);
    frac1 = frac1 * frac1 * (3.0 - (2.0 * frac1));

    vec3 color = mix(backColor, stripeColor, frac2);
    color = color * vDiffuseColor + vSpecularColor;

    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="processing_bric_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying float vLightIntensity;
varying vec2 vBricPos;
varying vec2 vUV;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 eyePosition = vec3(0.0, 0.0, 4.0);

const float specularContribution = 0.3;
const float diffuseContribution = 0.7;

void main(void) {
    vec3 tnorm = normalize(normal);
    vec3 lightDir = normalize(lightPosition - position);
    vec3 viweDir = normalize(eyePosition - position);
    vec3 reflectDir = reflect(-lightDir, tnorm);

    float diffuse = max( dot(lightDir, tnorm), 0.0 );
    float spec = 0.0;
    if (diffuse > 0.0) {
        spec = max( dot(reflectDir, viweDir), 0.0 );
        spec = pow( spec, 16.0 );
    }

    vLightIntensity = diffuseContribution * diffuse + specularContribution * spec;

    vBricPos = position.xy;

    gl_Position = worldViewProjection * vec4(position, 1.0);

    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="processing_bric_frag">
precision highp float;

varying float vLightIntensity;
varying vec2 vBricPos;
varying vec2 vUV;

uniform sampler2D textureSampler;

vec3 bricColor = vec3(1.0, 0.3, 0.2);
vec3 motarColor = vec3(0.85, 0.86, 0.84);
vec2 bricSize = vec2(0.3, 0.15);
vec2 bricPet = vec2(0.8, 0.75);

void main(void) {
    vec3 color;
    vec2 pos, useBrick;

    pos = vBricPos / bricSize;
    if (fract( pos.y * 0.5 ) > 0.5) {
        pos.x += 0.5;
    }

    pos = fract(pos);
    useBrick = step(pos, bricPet);

    color = mix(motarColor, bricColor, useBrick.x * useBrick.y) * vLightIntensity;

    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="processing_chessboard_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec2 vUV;

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="processing_chessboard_frag">
precision highp float;

varying float vLightIntensity;
varying vec2 vBricPos;
varying vec2 vUV;

uniform sampler2D textureSampler;

vec3 color1 = vec3(1.0, 1.0, 1.0);
vec3 color2 = vec3(0.0, 0.0, 0.0);
vec3 avgColor = vec3(0.5, 0.5, 0.5);
float frequency = 16.0;

void main(void) {
    vec3 color;
    vec2 fw = fwidth(vUV);
    vec2 fuzz = fw * frequency * 2.0;
    float fuzzMax = max(fuzz.s, fuzz.t);

    vec2 checkPos = fract(vUV * frequency);

    if (fuzzMax < 0.5) {
        vec2 p = smoothstep( vec2(0.5), fuzz + vec2(0.5), checkPos ) + (1.0 - smoothstep( vec2(0.0), fuzz, checkPos ));
        color = mix(color1, color2, p.x * p.y + (1.0 - p.x)*(1.0 - p.y));
        color = mix(color, avgColor, smoothstep(0.125, 0.5, fuzzMax));
    } else {
        color = avgColor;
    }

    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="processing_grid_vret">
// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec3 vDiffuseColor;
varying vec3 vSpecularColor;
varying vec2 vUV;

vec3 lightPosition = vec3(0.0, 4.0, 4.0);
vec3 lightColor = vec3(0.9, 0.8, 0.7);
vec3 eyePosition = vec3(0.0, 0.0, 4.0);
vec3 specular = vec3(0.2, 0.2, 0.2);
vec3 ambient = vec3(0.2, 0.2, 0.2);
float Kd = 0.8;

const float specularContribution = 0.3;
const float diffuseContribution = 0.7;

void main(void) {
    vec3 tnorm = normalize(normal);
    vec3 lightDir = normalize(lightPosition - position);
    vec3 viweDir = normalize(eyePosition - position);
    vec3 HVec = normalize(viweDir + lightDir);

    float spec = abs( dot(HVec, tnorm) );
    spec = pow(spec, 16.0);

    vDiffuseColor = lightColor * vec3(Kd * abs( dot(lightDir, tnorm) ));
    vDiffuseColor = clamp(ambient + vDiffuseColor, 0.0, 1.0);
    vSpecularColor = clamp(lightColor * spec * specular, 0.0, 1.0);

    gl_Position = worldViewProjection * vec4(position, 1.0);

    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="processing_grid_frag">
precision highp float;

varying vec3 vDiffuseColor;
varying vec3 vSpecularColor;
varying vec2 vUV;

uniform sampler2D textureSampler;

vec2 scale = vec2(10.0, 10.0);
vec2 threshold = vec2(0.13, 0.13);
vec3 surfaceColor = vec3(0.9, 0.7, 0.25);

void main(void) {
    float ss = fract(vUV.s * scale.x);
    float tt = fract(vUV.t * scale.y);

    if ( (ss > threshold.s) && (tt > threshold.t) ) {
        discard;
    }

    vec3 color = surfaceColor * vDiffuseColor + vSpecularColor;

    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="postEffect_brightness_vret">
// Attributes
attribute vec3 position;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec2 vUV;

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="postEffect_brightness_frag">
precision highp float;

varying vec2 vUV;

uniform sampler2D picSampler;

// change me!!!
float alpha = 0.6;

void main(void) {
    gl_FragColor = texture2D(picSampler, vUV) * alpha;
}
</script>

<script type="x-shader/x-vertex" id="postEffect_contrast_vret">
// Attributes
attribute vec3 position;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec2 vUV;

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="postEffect_contrast_frag">
precision highp float;

varying vec2 vUV;

uniform sampler2D picSampler;

// change me!!!
float alpha = 0.6;

void main(void) {
    vec3 color = texture2D(picSampler, vUV).rgb;
    vec3 avgLuminance = vec3(0.0, 0.0, 0.0);
    color = mix(avgLuminance, color, alpha);
    gl_FragColor = vec4(color, 1.0);
}
</script>

<script type="x-shader/x-vertex" id="postEffect_saturation_vret">
// Attributes
attribute vec3 position;
attribute vec2 uv;

// Uniforms
uniform mat4 worldViewProjection;

// Varying
varying vec2 vUV;

void main(void) {
    gl_Position = worldViewProjection * vec4(position, 1.0);

    vUV = uv;
}
</script>
<script type="x-shader/x-fragment" id="postEffect_saturation_frag">
precision highp float;

varying vec2 vUV;

uniform sampler2D picSampler;

// Values from "Graphics Shaders: Theory and Practice" by Bailey and Cunningham
const vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);

// change me!!!
float alpha = 0.6;

void main(void) {
    vec3 color = texture2D(picSampler, vUV).rgb;
    vec3 luminance = vec3( dot(color, luminanceWeighting) );
    color = mix(luminance, color, alpha);
    gl_FragColor = vec4(color, 1.0);
}
</script>

<div id="outerContainer">
  <div id="subHeaderBackground">
    <div id="templateDropdown" class="dropdownContainer">
      <div class="dropdownLabel">Templates:</div>
      <div class="dropdownSelectContainer">
        <select id="templates">

          <optgroup label="渲染光照">
            <option value="noLight" selected>没有光照(纯色)</option>
            <option value="flat">偏平渲染</option>
            <option value="simplestLight">最简单光照</option>
            <option value="perVertexLighting">逐顶点光照</option>
            <option value="perPixelLighting">逐像素光照</option>
            <option value="pointLight">点光源</option>
            <option value="spotLight">聚光灯</option>
            <option value="basicTexture">加载纹理</option>
          </optgroup>

          <optgroup label="非真实感渲染(NPR)">
            <option value="tone">卡通渲染</option>
            <option value="hatch">影线渲染</option>
            <option value="gooch">Gooch渲染</option>
            <option value="PolkaDot">波尔卡圆点渲染</option>
          </optgroup>

          <optgroup label="变形特效">
            <option value="sphereTransform">球形变形特效</option>
          </optgroup>

          <optgroup label="噪声渲染">
            <option value="simpleNoise">简易噪声(逐顶点)</option>
            <option value="PerlinNoise">柏林噪声(逐顶点)</option>
          </optgroup>

          <optgroup label="基于过程渲染">
            <option value="stripe">条纹渲染</option>
            <option value="bric">砖墙渲染</option>
            <option value="chessboard">棋盘渲染</option>
            <option value="grid">网格渲染</option>
          </optgroup>

          <optgroup label="图像处理"></optgroup>
          <optgroup label="亮度、对比度、饱和度">
            <option value="brightness">亮度</option>
            <option value="contrast">对比度</option>
            <option value="saturation">饱和度</option>
          </optgroup>

          <!--<option selected>Basic</option>-->
          <!--<option>Black and white</option>-->
          <!--<option>Cell shading</option>-->
          <!--<option>Phong</option>-->
          <!--<option>Discard</option>-->
          <!--<option>Wave</option>-->
          <!--<option>Spherical environment mapping</option>-->
          <!--<option>Fresnel</option>-->
        </select>
      </div>
    </div>
    <div id="meshDropdown" class="dropdownContainer">
      <div class="dropdownLabel">Meshes:</div>
      <div class="dropdownSelectContainer">
        <select id="meshes">
          <option>Sphere</option>
          <option>Torus</option>
          <option>Box</option>
          <option selected="">Torus Knot</option>
          <option>Ground</option>
          <option>schooner</option>
          <option>Tree</option>
          <option>teapot</option>
          <option>monkey</option>
          <option>Plane(post effect)</option>
        </select>
      </div>
    </div>
    <div id="buttons">
      <div id="compileButton" class="circleButton" title="Compile"></div>
    </div>
  </div>
  <div id="shadersContainer" style="background-color: green;">
    <div id="vertexRow" class="row">
      <div class="rowHeader">
        <span class="headerTitle">VERTEX SHADER</span>
      </div>
      <div class="rowEditor">
        <div class="shaderCode ace_editor ace-chrome" id="vertexShaderEditor">
          <textarea class="ace_text-input"
                    wrap="off" autocapitalize="off"
                    spellcheck="false"
                    style="opacity: 0; height: 16px; width: 7.20312px; right: 875.797px; bottom: 526px;"></textarea>
        </div>
      </div>
    </div>
    <div id="fragmentRow" class="row">
      <div class="rowHeader">
        <span class="headerTitle">PIXEL (FRAGMENT) SHADER</span>
      </div>
      <div class="rowEditor">
        <div class="shaderCode ace_editor ace-chrome" id="fragmentShaderEditor">
          <textarea class="ace_text-input"
                    wrap="off"
                    autocapitalize="off"
                    spellcheck="false"
                    style="opacity: 0; height: 16px; width: 7.20312px; right: 882.797px; bottom: 526px;"></textarea>
        </div>
      </div>
    </div>
  </div>
  <div id="renderContainer">
    <div id="loading" class="hidden">Loading...</div>
    <div id="renderCanvasContainer">
      <canvas id="renderCanvas" width="935" height="993" tabindex="1"></canvas>
    </div>
    <div id="errorLog"></div>
  </div>
</div>


</body>
</html>